#!/usr/bin/env python
import sys
sys.path.append('../.')
sys.path.append('.')

import os
import os.path as path
import optparse
import cPickle

from empryonic import io
from empryonic import tracklets
from empryonic.learning import match

def countNone( d ):
    def noneCounter( sofar, v ):
        if v:
            return sofar
        else:
            return sofar + 1
    return reduce(noneCounter, d.itervalues(), 0)
    

if __name__=="__main__":
    usage = """%prog [options] MATCH
Compares detected traxels.

Lhs traxel are treated as base, 'rhs' traxels as the contestants. 

MATCH - pickled match object
"""

    parser = optparse.OptionParser(usage=usage)
    '''
    parser.add_option('-t', '--threshold', type='float', dest='threshold', default=25, help='distance threshold for the matching (matching only below the threshold) [default: %default]')
    parser.add_option('-o', type='str', dest='out_fn', default='match.pickle', help='save output to file [default: %default]')
    parser.add_option('--swap-xy', action='store_true', dest='swap_xy', help='switches x and y coordinates of the traxels in FILE1')
    parser.add_option('--ignore-z', action='store_true', dest='ignore_z', help='only match in the x-y subspace')
    '''
    options, args = parser.parse_args()

    numArgs = len(args)
    if numArgs == 1:
        match_fn = args[0]
    else:
        parser.print_help()
        sys.exit(1)

    # Load match object
    print "Loading..."
    with open(match_fn, 'r') as f:
        assoc = cPickle.load(f)
    print "-> Loaded associations from " + path.basename(match_fn)
    print

    n_missed_objects = countNone(assoc['lhs'])
    n_false_pos = countNone(assoc['rhs'])
    n_true_pos = len(assoc['lhs']) - n_missed_objects

    print "True detections: " + str(n_true_pos)
    print "False detections: " + str(n_false_pos)
    print "Missed detections: " + str(n_missed_objects)
    
