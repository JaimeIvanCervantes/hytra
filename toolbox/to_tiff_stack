#!/usr/bin/env python
import glob
import h5py
from scipy import misc
import optparse
import os
import os.path as path
import sys
import numpy as np
import vigra

from IPython.Shell import IPShellEmbed

def slice_to_img(i, x_axis, y_axis, along, dim):
    slicing = dim * [0]
    slicing[x_axis] = slice(None)
    slicing[y_axis] = slice(None)
    slicing[along] = i
    return tuple(slicing)

def to_tiff_stack( fn, h5path, out_dir, along=2, prefix='0000', suffix='tif', x_axis=0, y_axis=1):
    with h5py.File( fn, 'r') as f:
        data = f[h5path].value
    del f
    for i in range(0,data.shape[along]):
        slicing = slice_to_img(i, x_axis, y_axis, along, len(data.shape))
        im = data[slicing]
        out_fn = path.join(out_dir, '%s_%04d.%s' % (prefix,i,suffix) )
        #misc.imsave(out_fn , im)
        vigra.impex.writeImage(im, out_fn)
        print "Saved: " + out_fn

if __name__=="__main__":
    # option parser
    usage = """%prog [options] H5FILE(S)
Convert HDF5 volumetric dataset to a stack of tiff files.

Standard unix GLOB matching (i.e. "*.h5") as well as several filenames are supported as arguments.
"""
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-d', '--dataset', type='string', dest='src', default='/raw/volume', help='path to HDF5 dataset [default: %default]')
    parser.add_option('-a', '--along', type='int', dest='along', default='2', help='convert along axis [default: %default]')
    parser.add_option('-p', '--prefix', type='string', dest='prefix', default='', help='output files prefix [default: %default]')
    parser.add_option('-s', '--suffix', type='string', dest='suffix', default='tif', help='determines image format [default: %default]')
    parser.add_option('-o', type='string', dest='out_dir', default='out', help='output directory [default: %default]')
    parser.add_option('-x', '--x-axis', type='int', dest='x_axis', default=0, help='axis representing x direction')
    parser.add_option('-y', '--y-axis', type='int', dest='y_axis', default=1, help='axis representing y direction')

    options, args = parser.parse_args()

    numArgs = len(args)
    if numArgs > 0:
        fns = []
        for arg in args:
            fns.extend(glob.glob(arg))
    else:
        parser.print_help()
        sys.exit(1)
    
    for fn in fns:
        out_dir = "as_tiff-"+path.basename(fn)
        print "Converting " + fn + "..."
        if not path.exists( options.out_dir ):
            os.makedirs( options.out_dir )
	prefix = options.prefix
	prefix += fn.split('/')[-1] 
        to_tiff_stack( fn, options.src, options.out_dir, options.along, prefix, options.suffix, options.x_axis, options.y_axis)
        print
