#!/usr/bin/env python
import optparse
import sys
import h5py
import numpy as np
import os.path as path


if __name__=="__main__":
    usage = """%prog [options] h5file
Check, if projection would hide connected components.

h5file - volume to check
"""
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-a', type='int', dest='along', default=2, help='project along axis [default: %default]')
    '''
    parser.add_option('--swap-xy', action='store_true', dest='swap_xy', help='switches x and y coordinates of the traxels in FILE1')
    parser.add_option('--ignore-z', action='store_true', dest='ignore_z', help='only match in the x-y subspace')
    '''
    options, args = parser.parse_args()

    numArgs = len(args)
    if numArgs == 1:
        fn = args[0]
    else:
        parser.print_help()
        sys.exit(1)

    with h5py.File(fn, 'r') as f:
        #labels = set(f['objects/meta/id'].value)
        #print "-> %d labels read" % len(labels)
        volume = f['segmentation/labels'].value
        #print "-> volume loaded:", volume.shape
    
    projection = np.max(volume, axis=options.along)
    #print "-> projection:", projection.shape
    #print np.bincount(volume.flatten())
    #print np.bincount(projection.flatten())

    labels_before = set(np.unique(volume))
    labels_after = set(np.unique(projection))
    
    fn_bn = path.basename(fn)
    if(labels_before == labels_after):
        print "%s: labels did'nt change" % fn_bn
    else:
        print "%s: WARNING:number of labels did change: %d -> %d" %(fn_bn, len(labels_before), len(labels_after))
    
