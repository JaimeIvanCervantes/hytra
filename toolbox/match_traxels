#!/usr/bin/env python
import sys
sys.path.append('../.')
sys.path.append('.')

import os
import os.path as path
import optparse
import cPickle

from empryonic import io
from empryonic import tracklets
from empryonic.learning import match

if __name__=="__main__":
    usage = """%prog [options] FILE1 FILE2
Match two sets of traxels against each other.

Matching is done by (optimal) nearest neighbor search.
Output is a match object: a pickled python data structure. It can be inspected by unpickling it with python.
"""

    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-t', '--threshold', type='float', dest='threshold', default=25, help='distance threshold for the matching (matching only below the threshold) [default: %default]')
    parser.add_option('-o', type='str', dest='out_fn', default='match.pickle', help='save output to file [default: %default]')
    parser.add_option('--swap-xy', action='store_true', dest='swap_xy', help='switches x and y coordinates of the traxels in FILE1')
    parser.add_option('--ignore-z', action='store_true', dest='ignore_z', help='only match in the x-y subspace')
    parser.add_option('--timestep', dest='t', default = None, type='float')

    options, args = parser.parse_args()

    numArgs = len(args)
    if numArgs == 2:
        fn1 = args[0]
        fn2 = args[1]
    else:
        parser.print_help()
        sys.exit(1)

    # load traxels
    print "Loading traxels..."
    with io.LineageH5(fn1, 'r') as f1:
        traxels1 = f1.Tracklets(timestep=options.t, position='max', add_features_as_meta=False)
    print "-> Loaded " + str(len(traxels1.the)) + " traxels from " + path.basename(fn1)

    with io.LineageH5(fn2, 'r') as f2:
        traxels2 = f2.Tracklets(timestep=options.t, position='max', add_features_as_meta=False)
    print "-> Loaded " + str(len(traxels2.the)) + " traxels from " + path.basename(fn2)
    
    # match
    print "Matching..."
    assoc = match.match( traxels1, traxels2, options.threshold, options.ignore_z, options.swap_xy )

    with open(options.out_fn, 'w') as f:
        cPickle.dump(assoc, f)
    print "-> output written to " + options.out_fn
